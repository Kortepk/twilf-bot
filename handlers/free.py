import datetime
from global_data import MAIN_STATE, DATE_INPUT_STATE
from utils.keyboards import get_date_keyboard, get_cancel_keyboard
from telegram import Update
from telegram.ext import ContextTypes
from handlers.book import DatabaseManager
from utils.visualizer import BookingVisualizer
from io import BytesIO

async def handler(update, context):

    await update.message.reply_text(
        "üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å—Ç–æ–ª–∏–∫–æ–≤:",
        reply_markup=get_date_keyboard()
    )

    return MAIN_STATE

async def handle_date_choice(update: Update, func_name):
    query = update.callback_query if update.callback_query else None
    message = query.message if query else update.message

    try:
        if func_name == "free_today":
            date = datetime.date.today()
        elif func_name == "free_tomorrow":
            date = datetime.date.today() + datetime.timedelta(days=1)
        elif func_name == "free_day_after":
            date = datetime.date.today() + datetime.timedelta(days=2)
        elif func_name == "free_custom":
            await query.edit_message_text(
                "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì", 
                reply_markup=get_cancel_keyboard()
            ) 
            return DATE_INPUT_STATE
        else:
            await message.reply_text("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")
            return MAIN_STATE
        
        db = DatabaseManager()
        booked_tables = db.get_booked_tables_for_day(date)

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        visualizer = BookingVisualizer()
        title = f"–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ {date.strftime('%d.%m.%Y')}"
        image = visualizer.generate_booking_image(title, booked_tables)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        bio = BytesIO()
        bio.name = 'booking.png'
        image.save(bio, 'PNG')
        bio.seek(0)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ
        await message.reply_photo(photo=bio)

        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –±—ã–ª callback)
        if query:
            await query.edit_message_text(f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {date.strftime('%d.%m.%Y')}")

        return MAIN_STATE

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ handle_date_choice: {e}")
        await message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞")
        return MAIN_STATE


async def handle_manual_date(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –¥–∞—Ç—ã"""
    try:
        day, month, year = map(int, update.message.text.split('.'))
        date = datetime.date(year, month, day)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –¥–∞—Ç–∞ –Ω–µ –≤ –ø—Ä–æ—à–ª–æ–º
        if date < datetime.date.today():
            await update.message.reply_text("‚ùå –ù–µ–ª—å–∑—è –≤—ã–±—Ä–∞—Ç—å –ø—Ä–æ—à–µ–¥—à—É—é –¥–∞—Ç—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:",
                reply_markup=get_cancel_keyboard()
            )
            return DATE_INPUT_STATE
            
        await update.message.reply_text(f"–í—ã–±—Ä–∞–Ω–∞ –¥–∞—Ç–∞: {date.strftime('%d.%m.%Y')}")
        return MAIN_STATE  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –æ—Å–Ω–æ–≤–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        
    except (ValueError, IndexError):
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∫–∞–∫ –î–î.–ú–ú.–ì–ì–ì–ì:",
            reply_markup=get_cancel_keyboard()
        )
        return DATE_INPUT_STATE

async def cancel_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.callback_query:  # –ï—Å–ª–∏ –æ—Ç–º–µ–Ω–∞ —á–µ—Ä–µ–∑ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫—É
        query = update.callback_query
        await query.answer()
        await query.edit_message_text("‚ùå –í–≤–æ–¥ –¥–∞—Ç—ã –æ—Ç–º–µ–Ω—ë–Ω")
    elif update.message:  # –ï—Å–ª–∏ –æ—Ç–º–µ–Ω–∞ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /cancel
        await update.message.reply_text("‚ùå –í–≤–æ–¥ –¥–∞—Ç—ã –æ—Ç–º–µ–Ω—ë–Ω")
    
    return MAIN_STATE