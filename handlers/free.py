import datetime

from global_data import MAIN_STATE, DATE_INPUT_STATE

from utils.keyboards import get_date_keyboard, get_cancel_keyboard

from telegram import Update
from telegram.ext import ContextTypes

from handlers.book import DatabaseManager

async def handler(update, context):

    await update.message.reply_text(
        "üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å—Ç–æ–ª–∏–∫–æ–≤:",
        reply_markup=get_date_keyboard()
    )

    return MAIN_STATE

async def handle_date_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()  
    
    func_name = query.data

    print(query.data)

    try:
        if func_name == "free_today":
            date = datetime.date.today()
        elif func_name == "free_tomorrow":
            date = datetime.date.today() + datetime.timedelta(days=1)
        elif func_name == "free_day_after":
            date = datetime.date.today() + datetime.timedelta(days=2)
        elif func_name == "free_custom":
            await query.edit_message_text(
                "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì", 
                reply_markup=get_cancel_keyboard()
            ) 
            return DATE_INPUT_STATE
        
        db = DatabaseManager()
        booked_tables = db.get_booked_tables_for_day(datetime.date.today())

        await query.edit_message_text(
            f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {date.strftime('%d.%m.%Y')}\n"
            f"–ó–∞–Ω—è—Ç—ã–µ —Å—Ç–æ–ª–∏–∫–∏: {booked_tables}"  
        )
    except Exception as e:
        await query.edit_message_text(f"–û—à–∏–±–∫–∞: {str(e)}")

    return MAIN_STATE  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –æ—Å–Ω–æ–≤–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ

async def handle_manual_date(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –¥–∞—Ç—ã"""
    try:
        day, month, year = map(int, update.message.text.split('.'))
        date = datetime.date(year, month, day)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –¥–∞—Ç–∞ –Ω–µ –≤ –ø—Ä–æ—à–ª–æ–º
        if date < datetime.date.today():
            await update.message.reply_text("‚ùå –ù–µ–ª—å–∑—è –≤—ã–±—Ä–∞—Ç—å –ø—Ä–æ—à–µ–¥—à—É—é –¥–∞—Ç—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:",
                reply_markup=get_cancel_keyboard()
            )
            return DATE_INPUT_STATE
            
        await update.message.reply_text(f"–í—ã–±—Ä–∞–Ω–∞ –¥–∞—Ç–∞: {date.strftime('%d.%m.%Y')}")
        return MAIN_STATE  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –æ—Å–Ω–æ–≤–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        
    except (ValueError, IndexError):
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∫–∞–∫ –î–î.–ú–ú.–ì–ì–ì–ì:",
            reply_markup=get_cancel_keyboard()
        )
        return DATE_INPUT_STATE

async def cancel_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.callback_query:  # –ï—Å–ª–∏ –æ—Ç–º–µ–Ω–∞ —á–µ—Ä–µ–∑ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫—É
        query = update.callback_query
        await query.answer()
        await query.edit_message_text("‚ùå –í–≤–æ–¥ –¥–∞—Ç—ã –æ—Ç–º–µ–Ω—ë–Ω")
    elif update.message:  # –ï—Å–ª–∏ –æ—Ç–º–µ–Ω–∞ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /cancel
        await update.message.reply_text("‚ùå –í–≤–æ–¥ –¥–∞—Ç—ã –æ—Ç–º–µ–Ω—ë–Ω")
    
    return MAIN_STATE