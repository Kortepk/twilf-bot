import sqlite3
import datetime
from config import TABLES
from utils.time_check import is_within_working_hours


async def start(update, context):
    await update.message.reply_text("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É: /book <—Å—Ç–æ–ª–∏–∫> <–¥–∞—Ç–∞> <–≤—Ä–µ–º—è> <—á–∞—Å—ã>")


async def handler(update, context):
    try:
        table_number = int(context.args[0])
        booking_start_str = context.args[1] + ' ' + context.args[2]
        hours = int(context.args[3])
        user_id = update.message.from_user.id
        username = update.message.from_user.username

        if table_number not in TABLES:
            await update.message.reply_text(f'‚ùå –°—Ç–æ–ª–∏–∫ {table_number} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –î–æ—Å—Ç—É–ø–Ω—ã–µ: {TABLES}')
            return

        booking_start = datetime.datetime.strptime(booking_start_str, "%Y-%m-%d %H:%M")
        booking_end = booking_start + datetime.timedelta(hours=hours)

        if hours < 1:
            await update.message.reply_text('‚ö†Ô∏è –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è ‚Äî 1 —á–∞—Å.')
            return

        if booking_start.date() != booking_end.date():
            await update.message.reply_text('‚ö†Ô∏è –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å.')
            return

        if not is_within_working_hours(booking_start, booking_end):
            await update.message.reply_text('‚ö†Ô∏è –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–Ω–µ —Ä–∞–±–æ—á–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏.')
            return

        conn = sqlite3.connect('restaurant.db')
        cursor = conn.cursor()
        cursor.execute('''
            SELECT * FROM bookings 
            WHERE table_number = ? 
            AND ((booking_time <= ? AND booking_end_time > ?) 
            OR (booking_time < ? AND booking_end_time >= ?))
        ''', (
            table_number,
            booking_start_str, booking_start_str,
            booking_end.strftime("%Y-%m-%d %H:%M"), booking_end.strftime("%Y-%m-%d %H:%M")
        ))
        if cursor.fetchall():
            await update.message.reply_text('‚ùå –≠—Ç–æ—Ç —Å—Ç–æ–ª–∏–∫ —É–∂–µ –∑–∞–Ω—è—Ç –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è.')
            conn.close()
            return

        cursor.execute('''
            INSERT INTO bookings (user_id, username, table_number, booking_time, booking_end_time)
            VALUES (?, ?, ?, ?, ?)
        ''', (user_id, username, table_number, booking_start_str, booking_end.strftime("%Y-%m-%d %H:%M")))
        conn.commit()
        conn.close()

        await update.message.reply_text(
            f'‚úÖ –°—Ç–æ–ª–∏–∫ {table_number} –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω!\nüïí {booking_start_str} ‚Äì {booking_end.strftime("%Y-%m-%d %H:%M")}'
        )
    except (IndexError, ValueError):
        await update.message.reply_text('‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /book <—Å—Ç–æ–ª–∏–∫> <–¥–∞—Ç–∞ YYYY-MM-DD> <–≤—Ä–µ–º—è HH:MM> <—á–∞—Å—ã>')