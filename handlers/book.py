import sqlite3
import datetime
from global_data import TABLES
from utils.time_check import is_within_working_hours
from typing import List, Tuple, Optional

from telegram import Update
from telegram.ext import ContextTypes

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
DATABASE_NAME = 'data/restaurant.db'

class DatabaseManager:
    def __init__(self, db_name: str = DATABASE_NAME):
        self.db_name = db_name

    def _get_connection(self):
        """–°–æ–∑–¥–∞—ë—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"""
        return sqlite3.connect(self.db_name)

    def add_booking(
        self,
        user_id: int,
        username: str,
        table_number: int,
        booking_time: str,
        booking_hours: int = 2
    ) -> bool:
        """
        –î–æ–±–∞–≤–ª—è–µ—Ç –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –ë–î —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å—Ç–æ–ª–∏–∫–∞
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏, False –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        try:
            booking_start = datetime.datetime.strptime(booking_time, "%Y-%m-%d %H:%M")
            booking_end = booking_start + datetime.timedelta(hours=booking_hours)
            booking_end_str = booking_end.strftime("%Y-%m-%d %H:%M")

            if not self.is_table_available(table_number, booking_start, booking_end):
                return False

            with self._get_connection() as conn:
                conn.execute('''
                    INSERT INTO bookings 
                    (user_id, username, table_number, booking_time, booking_end_time)
                    VALUES (?, ?, ?, ?, ?)
                ''', (user_id, username, table_number, booking_time, booking_end_str))
            return True
        except Exception as e:
            print(f"Error adding booking: {e}")
            return False

    def is_table_available(
        self,
        table_number: int,
        start_time: datetime.datetime,
        end_time: datetime.datetime
    ) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–≤–æ–±–æ–¥–µ–Ω –ª–∏ —Å—Ç–æ–ª–∏–∫ –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø—Ä–æ–º–µ–∂—É—Ç–æ–∫ –≤—Ä–µ–º–µ–Ω–∏
        """
        try:
            with self._get_connection() as conn:
                cursor = conn.cursor()
                cursor.execute('''
                    SELECT 1 FROM bookings 
                    WHERE table_number = ? 
                    AND (
                        (booking_time < ? AND booking_end_time > ?) OR
                        (booking_time < ? AND booking_end_time > ?) OR
                        (booking_time >= ? AND booking_end_time <= ?)
                    )
                    LIMIT 1
                ''', (
                    table_number,
                    end_time.strftime("%Y-%m-%d %H:%M"), start_time.strftime("%Y-%m-%d %H:%M"),
                    start_time.strftime("%Y-%m-%d %H:%M"), end_time.strftime("%Y-%m-%d %H:%M"),
                    start_time.strftime("%Y-%m-%d %H:%M"), end_time.strftime("%Y-%m-%d %H:%M")
                ))
                return not cursor.fetchone()
        except Exception as e:
            print(f"Error checking table availability: {e}")
            return False

    def get_booked_tables_for_day(self, date: datetime.date) -> List[Tuple[int, str, str]]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–Ω—è—Ç—ã—Ö —Å—Ç–æ–ª–∏–∫–æ–≤ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –¥–∞—Ç—É
        –§–æ—Ä–º–∞—Ç: [(table_number, start_time, end_time), ...]
        """
        try:
            date_str = date.strftime("%Y-%m-%d")
            with self._get_connection() as conn:
                cursor = conn.cursor()
                cursor.execute('''
                    SELECT table_number, booking_time, booking_end_time 
                    FROM bookings 
                    WHERE DATE(booking_time) = ?
                    ORDER BY booking_time
                ''', (date_str,))
                return cursor.fetchall()
        except Exception as e:
            print(f"Error getting booked tables: {e}")
            return []

    def delete_booking(self, booking_id: int) -> bool:
        """
        –£–¥–∞–ª—è–µ—Ç –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ ID
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º —É–¥–∞–ª–µ–Ω–∏–∏, False –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        try:
            with self._get_connection() as conn:
                conn.execute('DELETE FROM bookings WHERE id = ?', (booking_id,))
            return True
        except Exception as e:
            print(f"Error deleting booking: {e}")
            return False

    def get_user_bookings(self, user_id: int) -> List[Tuple[int, int, str, str]]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        –§–æ—Ä–º–∞—Ç: [(booking_id, table_number, start_time, end_time), ...]
        """
        try:
            with self._get_connection() as conn:
                cursor = conn.cursor()
                cursor.execute('''
                    SELECT id, table_number, booking_time, booking_end_time
                    FROM bookings
                    WHERE user_id = ?
                    ORDER BY booking_time
                ''', (user_id,))
                return cursor.fetchall()
        except Exception as e:
            print(f"Error getting user bookings: {e}")
            return []


async def handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /book"""
    try:
        db = DatabaseManager()
        user_id = update.message.from_user.id
        username = update.message.from_user.username or "–ë–µ–∑ –∏–º–µ–Ω–∏"

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
        if len(context.args) < 3:
            await update.message.reply_text(
                '‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /book <—Å—Ç–æ–ª–∏–∫> <–¥–∞—Ç–∞ YYYY-MM-DD> <–≤—Ä–µ–º—è HH:MM> [—á–∞—Å—ã]\n'
            )
            return

        # –ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
        table_number = int(context.args[0])
        booking_date = context.args[1]
        booking_time = context.args[2]
        hours = int(context.args[3]) if len(context.args) > 3 else 2

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–æ–ª–∏–∫–∞
        if table_number not in TABLES:
            await update.message.reply_text(f'‚ùå –°—Ç–æ–ª–∏–∫ {table_number} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –î–æ—Å—Ç—É–ø–Ω—ã–µ: {TABLES}')
            return

        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        booking_start_str = f"{booking_date} {booking_time}"
        booking_start = datetime.datetime.strptime(booking_start_str, "%Y-%m-%d %H:%M")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏
        if hours < 1:
            await update.message.reply_text('‚ö†Ô∏è –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è ‚Äî 1 —á–∞—Å.')
            return

        booking_end = booking_start + datetime.timedelta(hours=hours)
        if booking_start.date() != booking_end.date():
            await update.message.reply_text('‚ö†Ô∏è –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å.')
            return

        if not is_within_working_hours(booking_start, booking_end):
            await update.message.reply_text('‚ö†Ô∏è –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–Ω–µ —Ä–∞–±–æ—á–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏.')
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        if db.add_booking(user_id, username, table_number, booking_start_str, hours):
            await update.message.reply_text(
                f'‚úÖ –°—Ç–æ–ª–∏–∫ {table_number} –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω!\n'
                f'üïí {booking_start_str} ‚Äì {booking_end.strftime("%Y-%m-%d %H:%M")}'
            )
        else:
            await update.message.reply_text('‚ùå –≠—Ç–æ—Ç —Å—Ç–æ–ª–∏–∫ —É–∂–µ –∑–∞–Ω—è—Ç –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è.')

    except ValueError:
        await update.message.reply_text(
            '‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /book <—Å—Ç–æ–ª–∏–∫> <–¥–∞—Ç–∞ YYYY-MM-DD> <–≤—Ä–µ–º—è HH:MM> [—á–∞—Å—ã]'
        )
    except Exception as e:
        await update.message.reply_text('‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏.')
        print(f"Booking error: {e}")

async def start(update, context):
    await update.message.reply_text("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É: /book <—Å—Ç–æ–ª–∏–∫> <–¥–∞—Ç–∞> <–≤—Ä–µ–º—è> <—á–∞—Å—ã>")
